<?php
/**
 * @file
 * Code for the FLDC Bio feature.
 */

include_once 'fldc_bio.features.inc';

/**
 * Load the Eventbrite API object.
 *
 * @return mixed
 *   Either NULL if the load fails, or an Eventbrite object.
 */
function fldc_bio_get_eventbrite_api() {
  $library = libraries_load('eventbrite');
  $eventbrite_api = new Eventbrite(array(
    'app_key' => variable_get('eventbrite_app_key', ''),
    'user_key' => variable_get('eventbrite_user_key', ''),
  ));
  if (empty($library['loaded']) || empty($eventbrite_api)) {
    drupal_set_message(t('Unable to load Eventbrite API library.', 'error'));
    return NULL;
  }
  return $eventbrite_api;
}

/**
 * Implements hook_cron().
 */
function fldc_bio_cron() {
  fldc_bio_update_all_attendees();
}

/**
 * Implements hook_cron_queue_info().
 */
function fldc_bio_cron_queue_info() {
  $queues = array();

  $queues['fldc_bio_bios_queue'] = array(
    'worker callback' => 'fldc_bio_update_attendee',
    'time' => 30,
  );

  return $queues;
}

/**
 * Updates all attendees with the latest Eventbrite data.
 */
function fldc_bio_update_all_attendees() {
  // Load the queue.
  $queue = DrupalQueue::get('fldc_bio_bios_queue');
  // Load the Eventbrite API.
  $eventbrite_api = fldc_bio_get_eventbrite_api();
  if (empty($eventbrite_api)) {
    return;
  }
  // Load all existing IDs.
  $bios = fldc_bio_get_bios();
  // Get a list of all events.
  $events = fldc_bio_get_events();
  // Get the attendees from Eventbrite for each event.
  foreach ($events as $event) {
    // Less performant, but there should never be more than one or two of these,
    // so it's not worth the hassle of using field_attach_load() and so on.
    $event = node_load($event->nid);
    $event_ids = field_get_items('node', $event, 'field_even_eventbrite');
    $eventbrite_id = $event_ids[0]['value'];
    $attendees_list = $eventbrite_api->__call('event_list_attendees', array(array(
      'id' => $eventbrite_id
    )));
    // Loop through the list of attendees from the Eventbrite API.
    foreach($attendees_list->attendees as $attendee) {
      $id = $attendee->attendee->id;
      // The node already exists, so use that.
      if (array_key_exists($id, $bios)) {
        $bio = $bios[$id];
      }
      // The node doesn't exist, so only pass in the Eventbrite ID.
      else {
        $bio = array(
          'field_bio_eventbrite' => $id,
        );
      }
      // Attach the attendee.
      $bio['attendee'] = $attendee;
      // Send the bio into the queue.
      $queue->createItem($bio);
    }
  }
}

/**
 * Worker callback for hook_cron_queue_info().
 *
 * Updates an individual attendee node.
 *
 * @see fldc_bio_cron_queue_info()
 */
function fldc_bio_update_attendee($data) {
  // Get the attendee, for easier access.
  $attendee = $data['attendee'];
  // Load the current node if it exists.
  if (!empty($data['nid'])) {
    $node = node_load($data['nid']);
    if (empty($node)) {
      return;
    }
  }
  // Create a new node if it doesn't.
  else {
    $node = new stdClass();
    $node->type = 'bio';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
  }
  // Update all fields.
  $node->field_bio_eventbrite[LANGUAGE_NONE][0]['value'] = $attendee->attendee->id;
  // "Attendee" bio type is NID 656.
  $node->field_bio_bioty_ref[LANGUAGE_NONE][0]['target_id'] = 656;
  // First name
  $node->field_bio_firstname[LANGUAGE_NONE][0]['value'] = $attendee->attendee->first_name;
  // Last name
  $node->field_bio_lastname[LANGUAGE_NONE][0]['value'] = $attendee->attendee->last_name;
  // Job title
  $node->field_bio_worktitle[LANGUAGE_NONE][0]['value'] = $attendee->attendee->job_title;
  // Company or organization
  $node->field_bio_co_org_name[LANGUAGE_NONE][0]['value'] = $attendee->attendee->company;
  // Website - requires some special handling for links.
  $link = fldc_validate_url($attendee->attendee->website);
  if (!empty($link) && $link == LINK_EXTERNAL) {
    $node->field_bio_web_site[LANGUAGE_NONE][0]['url'] = $attendee->attendee->website;
  }
  // Custom questions in EB require special handling.
  foreach ($attendee->attendee->answers as $answer) {
    switch ($answer->answer->question_id) {
      // drupal.org profile
      case '9330584':
        $link = fldc_validate_url($answer->answer->answer_text);
        if (!empty($link) && $link == LINK_EXTERNAL) {
          $node->field_bio_do_profile[LANGUAGE_NONE][0]['url'] = $answer->answer->answer_text;
        }
        break;
      // Twitter
      case '9330592':
        $link = fldc_validate_url($answer->answer->answer_text);
        if (!empty($link) && $link == LINK_EXTERNAL) {
          $node->field_bio_twitter_profile[LANGUAGE_NONE][0]['url'] = $answer->answer->answer_text;
        }
        break;
      // Bio
      case '9330624':
        $node->field_bio_body[LANGUAGE_NONE][0]['value'] = $answer->answer->answer_text;
        break;
      // Interests
      case '9330629':
        $node->field_bio_my_interest[LANGUAGE_NONE][0]['value'] = $answer->answer->answer_text;
        break;
    }
  }
  // Build the node title automatically.
  auto_entitylabel_set_title($node, 'node');
  node_save($node);
}

/**
 * Loads all events.
 *
 * @return array
 *   An empty array, or an array of all events, as returned from EFQ.
 */
function fldc_bio_get_events() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'even');
  $result = $query->execute();
  if (!empty($result['node'])) {
    return $result['node'];
  }
  else {
    return array();
  }
}

/**
 * Returns the Eventbrite IDs for all Bio nodes.
 *
 * @return array
 *   Either an empty array, or an array of NIDs and Eventbrite IDs, keyed by
 *   Eventbrite ID.
 */
function fldc_bio_get_bios() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'bio')
    ->fieldCondition('field_bio_eventbrite', 'value', 'NULL', '!=');
  $result = $query->execute();
  if (!empty($result['node'])) {
    $ids = array();
    // Attach the Eventbrite ID field to the objects.
    $fields = field_info_instances('node', 'bio');
    field_attach_load('node', $result['node'], FIELD_LOAD_CURRENT, array('field_id' => $fields['field_bio_eventbrite']['field_id']));
    // Extract the IDs and return them.
    foreach ($result['node'] as $bio) {
      $eventbrite_ids = field_get_items('node', $bio, 'field_bio_eventbrite');
      $id = $eventbrite_ids[0]['value'];
      $ids[$id] = array(
        'nid' => $bio->nid,
        'field_bio_eventbrite' => $id,
      );
    }
    return $ids;
  }
  else {
    return array();
  }
}

/**
 * Custom link validator.
 *
 * @param string $text
 *   The link text to be checked.
 *
 * @return mixed
 *   Either boolean FALSE, or the LINK_EXTERNAL constant.
 *
 * @see link_validate_url()
 */
function fldc_validate_url($text = '') {
  $link = link_validate_url($text);
  // External links should have a period in them somewhere - http://example.com,
  // for instance. This is to prevent links like @Example_Com from passing
  // link_validate_url(), which they do and shouldn't.
  if ($link == LINK_EXTERNAL && strpos($text, '.')) {
    return LINK_EXTERNAL;
  }
  else {
    return FALSE;
  }
}
